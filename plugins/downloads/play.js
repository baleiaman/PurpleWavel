// √â necess√°rio ter o 'axios' instalado para fazer as requisi√ß√µes √† API.
// Se n√£o tiver, instale com: npm install axios
const axios = require("axios");

module.exports = {
    // Nomes/aliases para ativar o comando
    nomes: ["play", "m√∫sica", "p"],
    // Descri√ß√£o do que o comando faz
    desc: ["Pesquisa e reproduz uma m√∫sica do YouTube."],
    // Exemplo de como usar o comando
    uso: ["<nome da m√∫sica>"],

    // A fun√ß√£o principal que ser√° executada
    run: async ({ bot, from, info, q, enviar, resposta }) => {
        // Fun√ß√µes para contagem de comandos (do seu c√≥digo original)
        // aumentartotalcmds();
        // aumentarcmdsgeral();

        // 1. Verifica se o usu√°rio digitou o nome da m√∫sica
        if (!q) {
            // Se 'q' (a query/texto) estiver vazio, envia uma mensagem de erro.
            // A vari√°vel 'resposta.textoparametro' deve estar configurada no seu bot.
            return enviar(resposta.textoparametro);
        }

        try {
            // 2. Pesquisa a m√∫sica na API
            const searchUrl = `https://kuromi-system-tech.onrender.com/api/pesquisayt?query=${encodeURIComponent(q)}`;
            const response = await axios.get(searchUrl);
            const data = response.data;

            // 3. Verifica se a pesquisa retornou algum resultado
            if (!data || !data.formattedVideos || data.formattedVideos.length === 0) {
                return enviar("‚ùå Nenhuma m√∫sica encontrada com esse nome. Tente outro termo!");
            }

            // Pega o primeiro v√≠deo da lista de resultados
            const video = data.formattedVideos[0];

            // 4. Formata a mensagem com os detalhes do v√≠deo
            const resultadoTexto = `
üéµ *M√öSICA ENCONTRADA* üéµ

üé¨ *T√≠tulo:* ${video.title || "N√£o informado"}
üë§ *Canal:* ${video.channel || "N√£o informado"}
üïí *Dura√ß√£o:* ${video.duration || "N√£o informado"}
üëÄ *Views:* ${video.views || "N√£o informado"}

_Enviando o √°udio, aguarde..._
            `.trim();

            // 5. Envia a mensagem com a foto (thumbnail) e os detalhes
            await bot.sendMessage(
                from,
                {
                    image: { url: video.thumbnail }, // URL da imagem do v√≠deo
                    caption: resultadoTexto,
                },
                { quoted: info } // Responde √† mensagem original do usu√°rio
            );

            // 6. Monta a URL para baixar o √°udio
            // A API usa o t√≠tulo do v√≠deo para gerar o link de √°udio
            const audioUrl = `https://kuromi-system-tech.onrender.com/api/play?name=${encodeURIComponent(video.title)}`;

            // 7. Envia a mensagem com o √°udio
            await bot.sendMessage(
                from,
                {
                    audio: { url: audioUrl },
                    mimetype: "audio/mpeg",
                    fileName: `${video.title}.mp3` // Nome do arquivo de √°udio
                },
                { quoted: info } // Responde √† mensagem original do usu√°rio
            );

        } catch (erro) {
            // Em caso de qualquer erro no processo, loga no console e envia uma mensagem
            console.error("‚ùå Erro no comando 'play':", erro);
            // A vari√°vel 'resposta.erro' deve estar configurada no seu bot.
            enviar(resposta.erro || "‚ùå Ocorreu um erro ao processar sua solicita√ß√£o.");
        }
    },
};
